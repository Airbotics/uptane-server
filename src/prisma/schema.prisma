generator client {
    provider            = "prisma-client-js"
    previewFeatures     = ["interactiveTransactions"]
}

datasource db {
    provider            = "postgresql"
    url                 = env("POSTGRES_CONN_STR")
}

// upload status of an object/image
enum UploadStatus {
    uploading
    uploaded
}

// status of provisioning credential
// NOTE issuing will always be the state until a user tries to download it
// then it will turn to downloaded, but it may be ready to be downloaded 
// some time before that
enum ProvisioningCredentialsStatus {
    issuing
    downloaded
    revoked
}

// type of tuf repo
enum TUFRepo {
    director
    image
}

// type of tuf role
enum TUFRole {
    root
    targets
    snapshot
    timestamp
}

// status of static delta generation
enum StaticDeltaStatus {
    underway
    failed
    succeeded
}

// type/format of image
enum ImageFormat {
    ostree
    binary                                                      // this is not supported for now
}

// a team of users, a team is the owner of all resources
model Team {
    id                  String          @id @default(uuid()) @unique
    name                String
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    refs                Ref[]
    objects             Object[]
    deltas              StaticDelta[]
    images              Image[]
    tuf_metadata        TufMetadata[]
    robots              Robot[]
    ecus                Ecu[]
    robot_manifests     RobotManifest[]
    network_reports     NetworkReport[]
    packages_reports    InstalledPackagesReport[]
    hw_info_reports     HardwareInfoReport[]
    akt_config_reports  AktualizrConfigReport[]
    robot_events        RobotEvent[]
    creds               ProvisioningCredentials[]
    groups              Group[]
    robot_groups        RobotGroup[]

    @@map("teams")
}


// provisioning credentials
// TODO add in the account that downloaded/revoked it
// TODO add in revoked_at timestamp
model ProvisioningCredentials {
    id                  String          @id @default(uuid()) @unique
    team_id             String
    arn                 String                                  // we save the arn so we can revoke it
    status              ProvisioningCredentialsStatus   @default(issuing)
    created_at          DateTime        @default(now())

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)

    @@unique([team_id, id])
    @@map("provisioning_credentials")
}


// images stored in image repo
model Image {
    id                  String          @id @default(uuid()) @unique
    team_id             String
    name                String                                  // human readable name
    size                Int                                     // size of image in bytes
    sha256              String          @unique                 // sha256 hash of image
    hwids               String[]                                // types/ids of ecu hardware this image can be deployed to
    status              UploadStatus                            // uploading or uploaded
    format              ImageFormat                             // type of image (binary or ostree)
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)

    tmp_ecu_images      TmpEcuImages[]
    ecus                Ecu[]

    @@unique([team_id, id])
    @@map("images")
}


// tuf metadata
model TufMetadata {
    id                  String          @id @default(uuid()) @unique
    team_id             String
    robot_id            String?
    role                TUFRole                                 // director or image repo
    repo                TUFRepo                                 // root, targets, snapshot or timestamp
    version             Int                                     // must match the version in the signed portion of the metadata
    value               Json                                    // holds entire signed metadata
    created_at          DateTime        @default(now())
    expires_at          DateTime                                // this should always match the 'expires' field in the signed portion

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)
    robot               Robot?          @relation(fields: [robot_id], references: [id], onDelete: Cascade)
    
    //TODO: Add the following conditional unique constraint when prisma implement it
    // @@unique([team_id, repo, role, version], where: {repo: TUFRepo.image})
    // @@unique([team_id, repo, role, version, robot_id], where: {repo: TUFRepo.director})
    //Keep an eye on issue here: https://github.com/prisma/prisma/issues/6974
    @@map("tuf_metadata")
}


// robots on which Airbotics will update software
// these are called vehicles in the Update spec
// TODO
// - add provisioned field denoting whether it is provisioned
model Robot {
    id                  String          @id @default(uuid()) @unique
    team_id             String
    agent_version       String?                             // the version of the agent running on the primary ecu
    last_seen_at        DateTime?                           // the last time this robot was seen at
    ecus_registered     Boolean         @default(false)     // whether the ecus have been registered, they can only do this once
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)

    ecus                Ecu[]
    robot_manifests     RobotManifest[]
    tuf_metadata        TufMetadata[]
    network_reports     NetworkReport[]
    packages_reports    InstalledPackagesReport[]
    hw_info_reports     HardwareInfoReport[]
    akt_config_reports  AktualizrConfigReport[]
    events              RobotEvent[]
    groups              RobotGroup[]

    @@unique([team_id, id])
    @@map("robots")
}


// ecus in robots
model Ecu {
    id                  String          @id @default(uuid()) @unique        // equivalent to ecu serial
    team_id             String
    robot_id            String
    hwid                String                              // hardware type/id of this ecu
    primary             Boolean                             // whether this ecu is the primary, only one per robot is supported
    image_id            String?                             // FK to whichever image is currently installed
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)
    robot               Robot           @relation(fields: [team_id, robot_id], references: [team_id, id], onDelete: Cascade)
    installed_image     Image?          @relation(fields: [team_id, image_id], references: [team_id, id], onDelete: Cascade)

    tmp_ecu_images      TmpEcuImages[]


    @@unique([team_id, id])
    @@map("ecus")
}

// a network report from a robot
model NetworkReport {
    id                  String          @id @default(uuid()) @unique
    team_id             String
    robot_id            String
    hostname            String?
    local_ipv4          String?
    mac                 String?
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)
    robot               Robot           @relation(fields: [team_id, robot_id], references: [team_id, id], onDelete: Cascade)

    @@unique([team_id, id])
    @@map("network_reports")
}

// installed packages report from a robot
model InstalledPackagesReport {
    id                  String          @id @default(uuid()) @unique
    team_id             String
    robot_id            String
    packages            Json                                // stored as a json field
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)
    robot               Robot           @relation(fields: [team_id, robot_id], references: [team_id, id], onDelete: Cascade)

    @@unique([team_id, id])
    @@map("installed_packages_reports")
}

// aktualizr config report from a robot
model AktualizrConfigReport {
    id                  String          @id @default(uuid()) @unique
    team_id             String
    robot_id            String
    config              Json                                // stored as a json field
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)
    robot               Robot           @relation(fields: [team_id, robot_id], references: [team_id, id], onDelete: Cascade)

    @@unique([team_id, id])
    @@map("aktualizr_config_reports")
}

// hardware info report from a robot
model HardwareInfoReport {
    id                  String          @id @default(uuid()) @unique
    team_id             String
    robot_id            String
    hardware_info       Json                                // stored as a json field
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)
    robot               Robot           @relation(fields: [team_id, robot_id], references: [team_id, id], onDelete: Cascade)

    @@unique([team_id, id])
    @@map("hardware_info_reports")
}

// telemetry events sent by a robot
model RobotEvent {
    id                  String          @id @default(uuid()) @unique
    team_id             String
    robot_id            String
    event_type          String                              // TODO make enum
    device_time         DateTime
    ecu                 String                              // TODO make FK to ecu table
    success             Boolean?
    created_at          DateTime        @default(now())

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)
    robot               Robot           @relation(fields: [team_id, robot_id], references: [team_id, id], onDelete: Cascade)

    @@unique([team_id, id])
    @@map("robot_events")
}


// robot manifests sent by primaries
model RobotManifest {
    id                  String          @default(uuid())
    team_id             String
    robot_id            String
    value               Json            // holds entire signed manifest
    valid               Boolean
    created_at          DateTime        @default(now())

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)
    robot               Robot           @relation(fields: [team_id, robot_id], references: [team_id, id], onDelete: Cascade)

    @@id([team_id, id])
    @@map("robot_manifests")
}



// ostree references
model Ref {
    name                String
    commit              String                                  // commit hash
    object_id           String                                  // object it points to
    team_id             String
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    object              Object          @relation(fields: [team_id, object_id], references: [team_id, object_id], onDelete: Cascade)
    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)

    @@id([team_id, name])
    @@map("refs")
}


// ostree object
// TODO rename object_id to id
model Object {
    object_id           String
    team_id             String
    size                Int                                     // size of object in bytes
    status              UploadStatus
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)
    refs                Ref[]
    from_deltas         StaticDelta[]   @relation(name: "DeltaFrom")
    to_deltas           StaticDelta[]   @relation(name: "DeltaTo")


    @@id([team_id, object_id])
    @@map("objects")
}

// ostree static deltas
model StaticDelta {
    from                String
    to                  String
    team_id             String
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt
    status              StaticDeltaStatus @default(underway)

    from_delta          Object          @relation(name: "DeltaFrom", fields: [team_id, from], references: [team_id, object_id], onDelete: Cascade)
    to_delta            Object          @relation(name: "DeltaTo", fields: [team_id, to], references: [team_id, object_id], onDelete: Cascade)
    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)

    @@id([team_id, from, to])
    @@map("static_deltas")
}



// TODO this is a temporary table
model TmpEcuImages {
    ecu_id              String
    image_id            String
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt
    acknowledged        Boolean         @default(false)

    ecu                 Ecu             @relation(fields: [ecu_id], references: [id], onDelete: Cascade)
    image               Image           @relation(fields: [image_id], references: [id], onDelete: Cascade)

    @@unique([ecu_id, image_id])
    @@map("tmp_ecu_images")
}

// groups that a robot can be in
model Group {
    id                  String          @id @default(uuid()) @unique
    name                String
    description         String
    team_id             String
    created_at          DateTime        @default(now())
 
    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)
    
    robots              RobotGroup[]

    @@unique([id, team_id])
    @@map("groups")
}

// mappings between a robot and which groups they are in
model RobotGroup {
    robot_id            String
    group_id            String
    team_id             String
    created_at          DateTime        @default(now())

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)
    robot               Robot           @relation(fields: [robot_id], references: [id], onDelete: Cascade)
    group               Group           @relation(fields: [group_id], references: [id], onDelete: Cascade)

    @@id([team_id, robot_id, group_id])
    @@map("robot_groups")
}

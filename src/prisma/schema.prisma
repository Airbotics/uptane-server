generator client {
    provider            = "prisma-client-js"
    previewFeatures     = ["interactiveTransactions"]
}

datasource db {
    provider            = "postgresql"
    url                 = env("POSTGRES_CONN_STR")
}

// upload status of an object/image
enum UploadStatus {
    uploading
    uploaded
}

// type of tuf repo
enum TUFRepo {
    director
    image
}

// type of tuf role
enum TUFRole {
    root
    targets
    snapshot
    timestamp
}

enum DeltaGeneration {
    underway
    failed
    succeeded
}

// type/format of image
enum ImageFormat {
    ostree
    binary
}

// team to contain all resources (metadata, ecus, manifests, images, etc.) related to the same project
model Team {
    id                  String          @id @default(uuid()) @unique
    name                String
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    refs                Ref[]
    objects             Object[]
    deltas              Delta[]
    images              Image[]
    metadata            Metadata[]
    robots              Robot[]
    ecus                Ecu[]
    robot_manifests     RobotManifest[]
    network_reports     NetworkReport[]
    creds               ProvisioningCredentials[]

    @@map("teams")
}


// provisioning credentials
// TODO add in the account downloaded it
model ProvisioningCredentials {
    id                  String          @id @default(uuid()) @unique
    team_id             String
    created_at          DateTime        @default(now())

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)

    @@unique([team_id, id])
    @@map("provisioning_credentials")
}


// images stored in image repo
model Image {
    id                  String          @id @default(uuid()) @unique
    team_id             String
    name                String                                  // human readable name
    size                Int                                     // size of image in bytes
    sha256              String          @unique                 // sha256 hash of image
    hwids               String[]                                // types/ids of ecu hardware this image can be deployed to
    status              UploadStatus                            // uploading or uploaded
    format              ImageFormat                             // type of image (binary or ostree)
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)

    tmp_ecu_images      TmpEcuImages[]

    @@unique([team_id, id])
    @@map("images")
}


// tuf metadata
model Metadata {
    id                  String          @id @default(uuid()) @unique
    team_id             String
    robot_id            String?
    role                TUFRole                                 // director or image repo
    repo                TUFRepo                                 // root, targets, snapshot or timestamp
    version             Int                                     // must match the version in the signed portion of the metadata
    value               Json                                    // holds entire signed metadata

    created_at          DateTime        @default(now())
    expires_at          DateTime                                // this should always match the 'expires' field in the signed portion

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)
    robot               Robot?          @relation(fields: [robot_id], references: [id], onDelete: Cascade)
    
    //TODO: Add the following conditional unique constraint when prisma implement it
    // @@unique([team_id, repo, role, version], where: {repo: TUFRepo.image})
    // @@unique([team_id, repo, role, version, robot_id], where: {repo: TUFRepo.director})
    //Keep an eye on issue here: https://github.com/prisma/prisma/issues/6974
    @@map("metadata")
}


// robots on which Airbotics will update software
// these are called vehicles in the Update spec
// TODO
// - add provisioned field denoting whether it is provisioned
model Robot {
    id                  String          @id @default(uuid()) @unique
    team_id             String

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)

    ecus                Ecu[]
    robot_manifests     RobotManifest[]
    metadata            Metadata[]
    network_reports     NetworkReport[]

    @@unique([team_id, id])
    @@map("robots")
}


// ecus on robots
// TODO 
// - add last_seen field
model Ecu {
    id                  String          @id @default(uuid()) @unique
    team_id             String
    robot_id            String
    hwid                String                              // hardware type/id of this ecu
    primary             Boolean                             // whether this ecu is the primary, only one per robot is supported
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)
    robot               Robot           @relation(fields: [team_id, robot_id], references: [team_id, id], onDelete: Cascade)

    tmp_ecu_images      TmpEcuImages[]


    @@unique([team_id, id])
    @@map("ecus")
}

// a network report from a robot
model NetworkReport {
    id                  String          @id @default(uuid()) @unique
    team_id             String
    robot_id            String
    hostname            String?
    local_ipv4          String?
    mac                 String?
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)
    robot               Robot           @relation(fields: [team_id, robot_id], references: [team_id, id], onDelete: Cascade)


    @@unique([team_id, id])
    @@map("network_reports")
}


// robot manifests sent by primaries
model RobotManifest {
    id                  String          @default(uuid())
    team_id             String
    robot_id            String
    value               Json            // holds entire signed manifest
    valid               Boolean
    created_at          DateTime        @default(now())

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)
    robot               Robot           @relation(fields: [team_id, robot_id], references: [team_id, id], onDelete: Cascade)

    @@id([team_id, id])
    @@map("robot_manifests")
}



// ostree references
model Ref {
    name                String                                  // `/heads/main` or similar
    commit              String                                  // commit hash
    object_id           String                                  // object it points to
    team_id             String

    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    object              Object          @relation(fields: [team_id, object_id], references: [team_id, object_id], onDelete: Cascade)
    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)

    @@id([team_id, name])
    @@map("refs")
}


// ostree object
// TODO rename object_id to id
model Object {
    object_id           String
    team_id             String
    size                Int                                     // size of object in bytes
    status              UploadStatus
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt

    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)
    refs                Ref[]
    from_deltas         Delta[]         @relation(name: "DeltaFrom")
    to_deltas           Delta[]         @relation(name: "DeltaTo")


    @@id([team_id, object_id])
    @@map("objects")
}

// ostree deltas
// TODO rename delta_id to id
model Delta {
    // delta_id            String          @id @default(uuid()) @unique
    from                String
    to                  String
    team_id             String
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt
    status              DeltaGeneration @default(underway)

    from_delta          Object          @relation(name: "DeltaFrom", fields: [team_id, from], references: [team_id, object_id], onDelete: Cascade)
    to_delta            Object          @relation(name: "DeltaTo", fields: [team_id, to], references: [team_id, object_id], onDelete: Cascade)
    team                Team            @relation(fields: [team_id], references: [id], onDelete: Cascade)

    @@id([team_id, from, to])
    @@map("deltas")
}



// TODO this is a temporary table
model TmpEcuImages {
    ecu_id              String
    image_id            String
    created_at          DateTime        @default(now())
    updated_at          DateTime        @updatedAt
    acknowledged        Boolean         @default(false)

    ecu                 Ecu             @relation(fields: [ecu_id], references: [id], onDelete: Cascade)
    image               Image           @relation(fields: [image_id], references: [id], onDelete: Cascade)

    @@unique([ecu_id, image_id])
    @@map("tmp_ecu_images")
}